name: Create EKS Cluster

on: workflow_dispatch

env:
  AWS_REGION: us-east-1
  NODE_TYPE: t3.medium
  GIT_OWNER: Kirti160598
  GIT_REPO: flux-with-helm
  NODE_COUNT: 1
  GIT_BRANCH: main
  K8S_VERSION: "1.32"
  CLUSTER_NAME: github-eks-cluster-nodeport

jobs:
  create-eks:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
     
      - name: Create Namespace
        run: |
          kubectl create namespace my-namespace-ns-1 || echo "Namespace already exists"

      - name: Verify Cluster Access
        run: |
          kubectl get nodes

      - name: Install Latest Flux CLI
        run: |
          FLUX_VERSION=$(curl -s https://api.github.com/repos/fluxcd/flux2/releases/latest | grep tag_name | cut -d '"' -f 4)
          echo "Downloading Flux CLI version: $FLUX_VERSION"
          DOWNLOAD_URL=$(curl -s https://api.github.com/repos/fluxcd/flux2/releases/latest | grep browser_download_url | grep linux_amd64.tar.gz | cut -d '"' -f 4)
          curl -Lo flux.tar.gz "$DOWNLOAD_URL"
          tar -xzf flux.tar.gz
          sudo mv flux /usr/local/bin/
          flux --version

      - name: Flux Bootstrap GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.FLUX_GITHUB_TOKEN }}
        run: |
          flux bootstrap github \
            --owner=$GIT_OWNER \
            --repository=$GIT_REPO \
            --branch=$GIT_BRANCH \
            --path=clusters/staging \
            --personal

      - name: Wait for Flux Kustomizations to Reconcile
        run: |
          flux wait kustomization infra-controllers -n flux-system --for=condition=ready --timeout=10m || true
          flux wait kustomization infra-configs -n flux-system --for=condition=ready --timeout=10m || true
          flux wait kustomization apps -n flux-system --for=condition=ready --timeout=5m || true

      - name: Wait for HelmRelease ingress-nginx to be Ready
        run: |
          flux wait helmrelease ingress-nginx -n ingress-nginx --for=condition=ready --timeout=5m || true

      - name: Check Cluster Resources
        run: |
          flux get helmreleases --all-namespaces
          flux get kustomizations -A
          flux get sources helm -A
          kubectl get svc
          kubectl get pods -n ingress-nginx
          kubectl get svc -n ingress-nginx
          kubectl get pods -n my-namespace-ns-1
          kubectl get deploy -A
          kubectl get svc -A

      - name: Get EKS Worker Node Public IP and Test App
        run: |
          NODE_INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:eks:cluster-name,Values=$CLUSTER_NAME" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $NODE_INSTANCE_ID \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
          echo "Public Node IP: $PUBLIC_IP"
          curl -H "Host: podinfo.staging" http://$PUBLIC_IP:30080 || true
        
